/*
 * generated by Xtext 2.32.0
 */
package xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.ide.contentassist.antlr.internal.InternalSchemaTableParser;
import xtext.services.SchemaTableGrammarAccess;

public class SchemaTableParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SchemaTableGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SchemaTableGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getColonneAccess().getAlternatives(), "rule__Colonne__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getLangageAccess().getAlternatives(), "rule__Langage__Alternatives");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getTableAccess().getGroup_6(), "rule__Table__Group_6__0");
			builder.put(grammarAccess.getTableAccess().getGroup_8(), "rule__Table__Group_8__0");
			builder.put(grammarAccess.getTableAccess().getGroup_8_3(), "rule__Table__Group_8_3__0");
			builder.put(grammarAccess.getColonne_ImplAccess().getGroup(), "rule__Colonne_Impl__Group__0");
			builder.put(grammarAccess.getAlgorithmeAccess().getGroup(), "rule__Algorithme__Group__0");
			builder.put(grammarAccess.getAlgorithmeAccess().getGroup_5(), "rule__Algorithme__Group_5__0");
			builder.put(grammarAccess.getAlgorithmeAccess().getGroup_6(), "rule__Algorithme__Group_6__0");
			builder.put(grammarAccess.getAlgorithmeAccess().getGroup_7(), "rule__Algorithme__Group_7__0");
			builder.put(grammarAccess.getAlgorithmeAccess().getGroup_7_3(), "rule__Algorithme__Group_7_3__0");
			builder.put(grammarAccess.getColonneDeriveeAccess().getGroup(), "rule__ColonneDerivee__Group__0");
			builder.put(grammarAccess.getColonneEtrangereAccess().getGroup(), "rule__ColonneEtrangere__Group__0");
			builder.put(grammarAccess.getColonneIdentifiantsAccess().getGroup(), "rule__ColonneIdentifiants__Group__0");
			builder.put(grammarAccess.getTableAccess().getNomAssignment_1(), "rule__Table__NomAssignment_1");
			builder.put(grammarAccess.getTableAccess().getColonneDataAssignment_5(), "rule__Table__ColonneDataAssignment_5");
			builder.put(grammarAccess.getTableAccess().getColonneDataAssignment_6_1(), "rule__Table__ColonneDataAssignment_6_1");
			builder.put(grammarAccess.getTableAccess().getAlgoContrainteAssignment_8_2(), "rule__Table__AlgoContrainteAssignment_8_2");
			builder.put(grammarAccess.getTableAccess().getAlgoContrainteAssignment_8_3_1(), "rule__Table__AlgoContrainteAssignment_8_3_1");
			builder.put(grammarAccess.getColonne_ImplAccess().getNomAssignment_1(), "rule__Colonne_Impl__NomAssignment_1");
			builder.put(grammarAccess.getAlgorithmeAccess().getNomAssignment_1(), "rule__Algorithme__NomAssignment_1");
			builder.put(grammarAccess.getAlgorithmeAccess().getRessourceAssignment_4(), "rule__Algorithme__RessourceAssignment_4");
			builder.put(grammarAccess.getAlgorithmeAccess().getDocumentationAssignment_5_1(), "rule__Algorithme__DocumentationAssignment_5_1");
			builder.put(grammarAccess.getAlgorithmeAccess().getLangageAssignment_6_1(), "rule__Algorithme__LangageAssignment_6_1");
			builder.put(grammarAccess.getAlgorithmeAccess().getEntreeAssignment_7_2(), "rule__Algorithme__EntreeAssignment_7_2");
			builder.put(grammarAccess.getAlgorithmeAccess().getEntreeAssignment_7_3_1(), "rule__Algorithme__EntreeAssignment_7_3_1");
			builder.put(grammarAccess.getAlgorithmeAccess().getSortieAssignment_9(), "rule__Algorithme__SortieAssignment_9");
			builder.put(grammarAccess.getColonneDeriveeAccess().getNomAssignment_1(), "rule__ColonneDerivee__NomAssignment_1");
			builder.put(grammarAccess.getColonneDeriveeAccess().getAlgorithmeAssignment_3(), "rule__ColonneDerivee__AlgorithmeAssignment_3");
			builder.put(grammarAccess.getColonneEtrangereAccess().getNomAssignment_1(), "rule__ColonneEtrangere__NomAssignment_1");
			builder.put(grammarAccess.getColonneEtrangereAccess().getIdColonneTableEtrangereAssignment_3(), "rule__ColonneEtrangere__IdColonneTableEtrangereAssignment_3");
			builder.put(grammarAccess.getColonneEtrangereAccess().getTableEtrangereAssignment_5(), "rule__ColonneEtrangere__TableEtrangereAssignment_5");
			builder.put(grammarAccess.getColonneIdentifiantsAccess().getNomAssignment_1(), "rule__ColonneIdentifiants__NomAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SchemaTableGrammarAccess grammarAccess;

	@Override
	protected InternalSchemaTableParser createParser() {
		InternalSchemaTableParser result = new InternalSchemaTableParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SchemaTableGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SchemaTableGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
