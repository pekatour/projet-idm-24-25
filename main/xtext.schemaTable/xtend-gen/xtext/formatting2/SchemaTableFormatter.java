/**
 * generated by Xtext 2.32.0
 */
package xtext.formatting2;

import algorithme.Algorithme;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import schemaTable.Colonne;
import schemaTable.ColonneDerivee;
import schemaTable.Table;
import xtext.services.SchemaTableGrammarAccess;

@SuppressWarnings("all")
public class SchemaTableFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SchemaTableGrammarAccess _schemaTableGrammarAccess;

  protected void _format(final Table table, @Extension final IFormattableDocument document) {
    EList<Colonne> _colonneData = table.getColonneData();
    for (final Colonne colonne : _colonneData) {
      document.<Colonne>format(colonne);
    }
    EList<Algorithme> _algoContrainte = table.getAlgoContrainte();
    for (final Algorithme algorithme : _algoContrainte) {
      document.<Algorithme>format(algorithme);
    }
  }

  protected void _format(final ColonneDerivee colonneDerivee, @Extension final IFormattableDocument document) {
    document.<Algorithme>format(colonneDerivee.getAlgorithme());
  }

  public void format(final Object colonneDerivee, final IFormattableDocument document) {
    if (colonneDerivee instanceof XtextResource) {
      _format((XtextResource)colonneDerivee, document);
      return;
    } else if (colonneDerivee instanceof ColonneDerivee) {
      _format((ColonneDerivee)colonneDerivee, document);
      return;
    } else if (colonneDerivee instanceof Table) {
      _format((Table)colonneDerivee, document);
      return;
    } else if (colonneDerivee instanceof EObject) {
      _format((EObject)colonneDerivee, document);
      return;
    } else if (colonneDerivee == null) {
      _format((Void)null, document);
      return;
    } else if (colonneDerivee != null) {
      _format(colonneDerivee, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(colonneDerivee, document).toString());
    }
  }
}
