/*
 * generated by Xtext 2.32.0
 */
package xtext.serializer;

import algorithme.Algorithme;
import algorithme.AlgorithmePackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import schemaTable.Colonne;
import schemaTable.ColonneDerivee;
import schemaTable.ColonneEtrangere;
import schemaTable.ColonneIdentifiants;
import schemaTable.SchemaTablePackage;
import schemaTable.Table;
import xtext.services.SchemaTableGrammarAccess;

@SuppressWarnings("all")
public class SchemaTableSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SchemaTableGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AlgorithmePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AlgorithmePackage.ALGORITHME:
				sequence_Algorithme(context, (Algorithme) semanticObject); 
				return; 
			}
		else if (epackage == SchemaTablePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SchemaTablePackage.COLONNE:
				sequence_Colonne_Impl(context, (Colonne) semanticObject); 
				return; 
			case SchemaTablePackage.COLONNE_DERIVEE:
				sequence_ColonneDerivee(context, (ColonneDerivee) semanticObject); 
				return; 
			case SchemaTablePackage.COLONNE_ETRANGERE:
				sequence_ColonneEtrangere(context, (ColonneEtrangere) semanticObject); 
				return; 
			case SchemaTablePackage.COLONNE_IDENTIFIANTS:
				sequence_ColonneIdentifiants(context, (ColonneIdentifiants) semanticObject); 
				return; 
			case SchemaTablePackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Algorithme returns Algorithme
	 *
	 * Constraint:
	 *     (
	 *         nom=EString 
	 *         ressource=EString 
	 *         documentation=EString? 
	 *         langage=Langage? 
	 *         (entree+=EString entree+=EString*)? 
	 *         sortie=EString
	 *     )
	 * </pre>
	 */
	protected void sequence_Algorithme(ISerializationContext context, Algorithme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Colonne returns ColonneDerivee
	 *     ColonneDerivee returns ColonneDerivee
	 *
	 * Constraint:
	 *     (nom=EString algorithme=Algorithme)
	 * </pre>
	 */
	protected void sequence_ColonneDerivee(ISerializationContext context, ColonneDerivee semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SchemaTablePackage.Literals.COLONNE__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemaTablePackage.Literals.COLONNE__NOM));
			if (transientValues.isValueTransient(semanticObject, SchemaTablePackage.Literals.COLONNE_DERIVEE__ALGORITHME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemaTablePackage.Literals.COLONNE_DERIVEE__ALGORITHME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColonneDeriveeAccess().getNomEStringParserRuleCall_1_0(), semanticObject.getNom());
		feeder.accept(grammarAccess.getColonneDeriveeAccess().getAlgorithmeAlgorithmeParserRuleCall_3_0(), semanticObject.getAlgorithme());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Colonne returns ColonneEtrangere
	 *     ColonneEtrangere returns ColonneEtrangere
	 *
	 * Constraint:
	 *     (nom=EString idColonneTableEtrangere=EString tableEtrangere=[Table|EString])
	 * </pre>
	 */
	protected void sequence_ColonneEtrangere(ISerializationContext context, ColonneEtrangere semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SchemaTablePackage.Literals.COLONNE__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemaTablePackage.Literals.COLONNE__NOM));
			if (transientValues.isValueTransient(semanticObject, SchemaTablePackage.Literals.COLONNE_ETRANGERE__ID_COLONNE_TABLE_ETRANGERE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemaTablePackage.Literals.COLONNE_ETRANGERE__ID_COLONNE_TABLE_ETRANGERE));
			if (transientValues.isValueTransient(semanticObject, SchemaTablePackage.Literals.COLONNE_ETRANGERE__TABLE_ETRANGERE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemaTablePackage.Literals.COLONNE_ETRANGERE__TABLE_ETRANGERE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColonneEtrangereAccess().getNomEStringParserRuleCall_1_0(), semanticObject.getNom());
		feeder.accept(grammarAccess.getColonneEtrangereAccess().getIdColonneTableEtrangereEStringParserRuleCall_3_0(), semanticObject.getIdColonneTableEtrangere());
		feeder.accept(grammarAccess.getColonneEtrangereAccess().getTableEtrangereTableEStringParserRuleCall_5_0_1(), semanticObject.eGet(SchemaTablePackage.Literals.COLONNE_ETRANGERE__TABLE_ETRANGERE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Colonne returns ColonneIdentifiants
	 *     ColonneIdentifiants returns ColonneIdentifiants
	 *
	 * Constraint:
	 *     nom=EString
	 * </pre>
	 */
	protected void sequence_ColonneIdentifiants(ISerializationContext context, ColonneIdentifiants semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SchemaTablePackage.Literals.COLONNE__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemaTablePackage.Literals.COLONNE__NOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColonneIdentifiantsAccess().getNomEStringParserRuleCall_1_0(), semanticObject.getNom());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Colonne returns Colonne
	 *     Colonne_Impl returns Colonne
	 *
	 * Constraint:
	 *     nom=EString
	 * </pre>
	 */
	protected void sequence_Colonne_Impl(ISerializationContext context, Colonne semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SchemaTablePackage.Literals.COLONNE__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemaTablePackage.Literals.COLONNE__NOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColonne_ImplAccess().getNomEStringParserRuleCall_1_0(), semanticObject.getNom());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (nom=EString colonneData+=Colonne colonneData+=Colonne* (algoContrainte+=Algorithme algoContrainte+=Algorithme*)?)
	 * </pre>
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
