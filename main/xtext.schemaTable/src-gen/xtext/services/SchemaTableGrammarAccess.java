/*
 * generated by Xtext 2.32.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SchemaTableGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.SchemaTable.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomEStringParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonnesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColonneDataAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColonneDataColonneParserRuleCall_5_0 = (RuleCall)cColonneDataAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cColonneDataAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cColonneDataColonneParserRuleCall_6_1_0 = (RuleCall)cColonneDataAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cContraintesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cAlgoContrainteAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cAlgoContrainteAlgorithmeParserRuleCall_8_2_0 = (RuleCall)cAlgoContrainteAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cAlgoContrainteAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cAlgoContrainteAlgorithmeParserRuleCall_8_3_1_0 = (RuleCall)cAlgoContrainteAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Table returns Table:
		//    'Table'nom=EString
		//    '{'
		//        'colonnes' '{' colonneData+=Colonne ( "," colonneData+=Colonne)* '}'
		//        ('contraintes' '{' algoContrainte+=Algorithme ( "," algoContrainte+=Algorithme)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Table'nom=EString
		//'{'
		//    'colonnes' '{' colonneData+=Colonne ( "," colonneData+=Colonne)* '}'
		//    ('contraintes' '{' algoContrainte+=Algorithme ( "," algoContrainte+=Algorithme)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Table'
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }
		
		//nom=EString
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_1_0() { return cNomEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'colonnes'
		public Keyword getColonnesKeyword_3() { return cColonnesKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//colonneData+=Colonne
		public Assignment getColonneDataAssignment_5() { return cColonneDataAssignment_5; }
		
		//Colonne
		public RuleCall getColonneDataColonneParserRuleCall_5_0() { return cColonneDataColonneParserRuleCall_5_0; }
		
		//( "," colonneData+=Colonne)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//colonneData+=Colonne
		public Assignment getColonneDataAssignment_6_1() { return cColonneDataAssignment_6_1; }
		
		//Colonne
		public RuleCall getColonneDataColonneParserRuleCall_6_1_0() { return cColonneDataColonneParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('contraintes' '{' algoContrainte+=Algorithme ( "," algoContrainte+=Algorithme)* '}' )?
		public Group getGroup_8() { return cGroup_8; }
		
		//'contraintes'
		public Keyword getContraintesKeyword_8_0() { return cContraintesKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//algoContrainte+=Algorithme
		public Assignment getAlgoContrainteAssignment_8_2() { return cAlgoContrainteAssignment_8_2; }
		
		//Algorithme
		public RuleCall getAlgoContrainteAlgorithmeParserRuleCall_8_2_0() { return cAlgoContrainteAlgorithmeParserRuleCall_8_2_0; }
		
		//( "," algoContrainte+=Algorithme)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//","
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }
		
		//algoContrainte+=Algorithme
		public Assignment getAlgoContrainteAssignment_8_3_1() { return cAlgoContrainteAssignment_8_3_1; }
		
		//Algorithme
		public RuleCall getAlgoContrainteAlgorithmeParserRuleCall_8_3_1_0() { return cAlgoContrainteAlgorithmeParserRuleCall_8_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ColonneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.SchemaTable.Colonne");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColonne_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColonneDeriveeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColonneEtrangereParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cColonneIdentifiantsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Colonne returns Colonne:
		//    Colonne_Impl | ColonneDerivee | ColonneEtrangere | ColonneIdentifiants;
		@Override public ParserRule getRule() { return rule; }
		
		//Colonne_Impl | ColonneDerivee | ColonneEtrangere | ColonneIdentifiants
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Colonne_Impl
		public RuleCall getColonne_ImplParserRuleCall_0() { return cColonne_ImplParserRuleCall_0; }
		
		//ColonneDerivee
		public RuleCall getColonneDeriveeParserRuleCall_1() { return cColonneDeriveeParserRuleCall_1; }
		
		//ColonneEtrangere
		public RuleCall getColonneEtrangereParserRuleCall_2() { return cColonneEtrangereParserRuleCall_2; }
		
		//ColonneIdentifiants
		public RuleCall getColonneIdentifiantsParserRuleCall_3() { return cColonneIdentifiantsParserRuleCall_3; }
	}
	public class Colonne_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.SchemaTable.Colonne_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomEStringParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		
		//Colonne_Impl returns Colonne:
		//    'c' nom=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'c' nom=EString
		public Group getGroup() { return cGroup; }
		
		//'c'
		public Keyword getCKeyword_0() { return cCKeyword_0; }
		
		//nom=EString
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_1_0() { return cNomEStringParserRuleCall_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.SchemaTable.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AlgorithmeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.SchemaTable.Algorithme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomEStringParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRessourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRessourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRessourceEStringParserRuleCall_4_0 = (RuleCall)cRessourceAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDocumentationKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDocumentationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDocumentationEStringParserRuleCall_5_1_0 = (RuleCall)cDocumentationAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLangageKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLangageAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLangageLangageEnumRuleCall_6_1_0 = (RuleCall)cLangageAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEntreeKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cEntreeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cEntreeEStringParserRuleCall_7_2_0 = (RuleCall)cEntreeAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cEntreeAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cEntreeEStringParserRuleCall_7_3_1_0 = (RuleCall)cEntreeAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cSortieKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSortieAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSortieEStringParserRuleCall_9_0 = (RuleCall)cSortieAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Algorithme returns algorithme::Algorithme:
		//    'Algorithme' nom=EString
		//    '{'
		//        'ressource' ressource=EString
		//        ('documentation' documentation=EString)?
		//        ('langage' langage=Langage)?
		//        ('entree' '{' entree+=EString ( "," entree+=EString)* '}' )?
		//        'sortie' sortie=EString
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Algorithme' nom=EString
		//'{'
		//    'ressource' ressource=EString
		//    ('documentation' documentation=EString)?
		//    ('langage' langage=Langage)?
		//    ('entree' '{' entree+=EString ( "," entree+=EString)* '}' )?
		//    'sortie' sortie=EString
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Algorithme'
		public Keyword getAlgorithmeKeyword_0() { return cAlgorithmeKeyword_0; }
		
		//nom=EString
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_1_0() { return cNomEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'ressource'
		public Keyword getRessourceKeyword_3() { return cRessourceKeyword_3; }
		
		//ressource=EString
		public Assignment getRessourceAssignment_4() { return cRessourceAssignment_4; }
		
		//EString
		public RuleCall getRessourceEStringParserRuleCall_4_0() { return cRessourceEStringParserRuleCall_4_0; }
		
		//('documentation' documentation=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'documentation'
		public Keyword getDocumentationKeyword_5_0() { return cDocumentationKeyword_5_0; }
		
		//documentation=EString
		public Assignment getDocumentationAssignment_5_1() { return cDocumentationAssignment_5_1; }
		
		//EString
		public RuleCall getDocumentationEStringParserRuleCall_5_1_0() { return cDocumentationEStringParserRuleCall_5_1_0; }
		
		//('langage' langage=Langage)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'langage'
		public Keyword getLangageKeyword_6_0() { return cLangageKeyword_6_0; }
		
		//langage=Langage
		public Assignment getLangageAssignment_6_1() { return cLangageAssignment_6_1; }
		
		//Langage
		public RuleCall getLangageLangageEnumRuleCall_6_1_0() { return cLangageLangageEnumRuleCall_6_1_0; }
		
		//('entree' '{' entree+=EString ( "," entree+=EString)* '}' )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'entree'
		public Keyword getEntreeKeyword_7_0() { return cEntreeKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//entree+=EString
		public Assignment getEntreeAssignment_7_2() { return cEntreeAssignment_7_2; }
		
		//EString
		public RuleCall getEntreeEStringParserRuleCall_7_2_0() { return cEntreeEStringParserRuleCall_7_2_0; }
		
		//( "," entree+=EString)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//entree+=EString
		public Assignment getEntreeAssignment_7_3_1() { return cEntreeAssignment_7_3_1; }
		
		//EString
		public RuleCall getEntreeEStringParserRuleCall_7_3_1_0() { return cEntreeEStringParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//'sortie'
		public Keyword getSortieKeyword_8() { return cSortieKeyword_8; }
		
		//sortie=EString
		public Assignment getSortieAssignment_9() { return cSortieAssignment_9; }
		
		//EString
		public RuleCall getSortieEStringParserRuleCall_9_0() { return cSortieEStringParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ColonneDeriveeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.SchemaTable.ColonneDerivee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cC_derivKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomEStringParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cAlgoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAlgorithmeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlgorithmeAlgorithmeParserRuleCall_3_0 = (RuleCall)cAlgorithmeAssignment_3.eContents().get(0);
		
		//ColonneDerivee returns ColonneDerivee:
		//    'c_deriv' nom=EString
		//        'algo' algorithme=Algorithme;
		@Override public ParserRule getRule() { return rule; }
		
		//'c_deriv' nom=EString
		//    'algo' algorithme=Algorithme
		public Group getGroup() { return cGroup; }
		
		//'c_deriv'
		public Keyword getC_derivKeyword_0() { return cC_derivKeyword_0; }
		
		//nom=EString
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_1_0() { return cNomEStringParserRuleCall_1_0; }
		
		//'algo'
		public Keyword getAlgoKeyword_2() { return cAlgoKeyword_2; }
		
		//algorithme=Algorithme
		public Assignment getAlgorithmeAssignment_3() { return cAlgorithmeAssignment_3; }
		
		//Algorithme
		public RuleCall getAlgorithmeAlgorithmeParserRuleCall_3_0() { return cAlgorithmeAlgorithmeParserRuleCall_3_0; }
	}
	public class ColonneEtrangereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.SchemaTable.ColonneEtrangere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cC_etrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomEStringParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdColonneTableEtrangereAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdColonneTableEtrangereEStringParserRuleCall_3_0 = (RuleCall)cIdColonneTableEtrangereAssignment_3.eContents().get(0);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTableEtrangereAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTableEtrangereTableCrossReference_5_0 = (CrossReference)cTableEtrangereAssignment_5.eContents().get(0);
		private final RuleCall cTableEtrangereTableEStringParserRuleCall_5_0_1 = (RuleCall)cTableEtrangereTableCrossReference_5_0.eContents().get(1);
		
		//ColonneEtrangere returns ColonneEtrangere:
		//    'c_etr' nom=EString
		//        'id' idColonneTableEtrangere=EString
		//        'from' tableEtrangere=[Table|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'c_etr' nom=EString
		//    'id' idColonneTableEtrangere=EString
		//    'from' tableEtrangere=[Table|EString]
		public Group getGroup() { return cGroup; }
		
		//'c_etr'
		public Keyword getC_etrKeyword_0() { return cC_etrKeyword_0; }
		
		//nom=EString
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_1_0() { return cNomEStringParserRuleCall_1_0; }
		
		//'id'
		public Keyword getIdKeyword_2() { return cIdKeyword_2; }
		
		//idColonneTableEtrangere=EString
		public Assignment getIdColonneTableEtrangereAssignment_3() { return cIdColonneTableEtrangereAssignment_3; }
		
		//EString
		public RuleCall getIdColonneTableEtrangereEStringParserRuleCall_3_0() { return cIdColonneTableEtrangereEStringParserRuleCall_3_0; }
		
		//'from'
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }
		
		//tableEtrangere=[Table|EString]
		public Assignment getTableEtrangereAssignment_5() { return cTableEtrangereAssignment_5; }
		
		//[Table|EString]
		public CrossReference getTableEtrangereTableCrossReference_5_0() { return cTableEtrangereTableCrossReference_5_0; }
		
		//EString
		public RuleCall getTableEtrangereTableEStringParserRuleCall_5_0_1() { return cTableEtrangereTableEStringParserRuleCall_5_0_1; }
	}
	public class ColonneIdentifiantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.SchemaTable.ColonneIdentifiants");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cC_idKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomEStringParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		
		//ColonneIdentifiants returns ColonneIdentifiants:
		//    'c_id' nom=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'c_id' nom=EString
		public Group getGroup() { return cGroup; }
		
		//'c_id'
		public Keyword getC_idKeyword_0() { return cC_idKeyword_0; }
		
		//nom=EString
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_1_0() { return cNomEStringParserRuleCall_1_0; }
	}
	
	public class LangageElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.SchemaTable.Langage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPYTHONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPYTHONPYTHONKeyword_0_0 = (Keyword)cPYTHONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTERNEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTERNEINTERNEKeyword_1_0 = (Keyword)cINTERNEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Langage returns algorithme::Langage:
		//                PYTHON = 'PYTHON' | INTERNE = 'INTERNE';
		public EnumRule getRule() { return rule; }
		
		//PYTHON = 'PYTHON' | INTERNE = 'INTERNE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PYTHON = 'PYTHON'
		public EnumLiteralDeclaration getPYTHONEnumLiteralDeclaration_0() { return cPYTHONEnumLiteralDeclaration_0; }
		
		//'PYTHON'
		public Keyword getPYTHONPYTHONKeyword_0_0() { return cPYTHONPYTHONKeyword_0_0; }
		
		//INTERNE = 'INTERNE'
		public EnumLiteralDeclaration getINTERNEEnumLiteralDeclaration_1() { return cINTERNEEnumLiteralDeclaration_1; }
		
		//'INTERNE'
		public Keyword getINTERNEINTERNEKeyword_1_0() { return cINTERNEINTERNEKeyword_1_0; }
	}
	
	private final TableElements pTable;
	private final ColonneElements pColonne;
	private final Colonne_ImplElements pColonne_Impl;
	private final EStringElements pEString;
	private final AlgorithmeElements pAlgorithme;
	private final ColonneDeriveeElements pColonneDerivee;
	private final ColonneEtrangereElements pColonneEtrangere;
	private final ColonneIdentifiantsElements pColonneIdentifiants;
	private final LangageElements eLangage;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SchemaTableGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTable = new TableElements();
		this.pColonne = new ColonneElements();
		this.pColonne_Impl = new Colonne_ImplElements();
		this.pEString = new EStringElements();
		this.pAlgorithme = new AlgorithmeElements();
		this.pColonneDerivee = new ColonneDeriveeElements();
		this.pColonneEtrangere = new ColonneEtrangereElements();
		this.pColonneIdentifiants = new ColonneIdentifiantsElements();
		this.eLangage = new LangageElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.SchemaTable".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Table returns Table:
	//    'Table'nom=EString
	//    '{'
	//        'colonnes' '{' colonneData+=Colonne ( "," colonneData+=Colonne)* '}'
	//        ('contraintes' '{' algoContrainte+=Algorithme ( "," algoContrainte+=Algorithme)* '}' )?
	//    '}';
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Colonne returns Colonne:
	//    Colonne_Impl | ColonneDerivee | ColonneEtrangere | ColonneIdentifiants;
	public ColonneElements getColonneAccess() {
		return pColonne;
	}
	
	public ParserRule getColonneRule() {
		return getColonneAccess().getRule();
	}
	
	//Colonne_Impl returns Colonne:
	//    'c' nom=EString;
	public Colonne_ImplElements getColonne_ImplAccess() {
		return pColonne_Impl;
	}
	
	public ParserRule getColonne_ImplRule() {
		return getColonne_ImplAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Algorithme returns algorithme::Algorithme:
	//    'Algorithme' nom=EString
	//    '{'
	//        'ressource' ressource=EString
	//        ('documentation' documentation=EString)?
	//        ('langage' langage=Langage)?
	//        ('entree' '{' entree+=EString ( "," entree+=EString)* '}' )?
	//        'sortie' sortie=EString
	//    '}';
	public AlgorithmeElements getAlgorithmeAccess() {
		return pAlgorithme;
	}
	
	public ParserRule getAlgorithmeRule() {
		return getAlgorithmeAccess().getRule();
	}
	
	//ColonneDerivee returns ColonneDerivee:
	//    'c_deriv' nom=EString
	//        'algo' algorithme=Algorithme;
	public ColonneDeriveeElements getColonneDeriveeAccess() {
		return pColonneDerivee;
	}
	
	public ParserRule getColonneDeriveeRule() {
		return getColonneDeriveeAccess().getRule();
	}
	
	//ColonneEtrangere returns ColonneEtrangere:
	//    'c_etr' nom=EString
	//        'id' idColonneTableEtrangere=EString
	//        'from' tableEtrangere=[Table|EString];
	public ColonneEtrangereElements getColonneEtrangereAccess() {
		return pColonneEtrangere;
	}
	
	public ParserRule getColonneEtrangereRule() {
		return getColonneEtrangereAccess().getRule();
	}
	
	//ColonneIdentifiants returns ColonneIdentifiants:
	//    'c_id' nom=EString;
	public ColonneIdentifiantsElements getColonneIdentifiantsAccess() {
		return pColonneIdentifiants;
	}
	
	public ParserRule getColonneIdentifiantsRule() {
		return getColonneIdentifiantsAccess().getRule();
	}
	
	//enum Langage returns algorithme::Langage:
	//                PYTHON = 'PYTHON' | INTERNE = 'INTERNE';
	public LangageElements getLangageAccess() {
		return eLangage;
	}
	
	public EnumRule getLangageRule() {
		return getLangageAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
