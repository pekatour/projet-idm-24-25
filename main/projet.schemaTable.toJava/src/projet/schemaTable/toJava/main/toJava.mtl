[comment encoding = UTF-8 /]
[module toJava('http://schemaTable', 'http://algorithme')]


[template public generateJava(aTable : Table)]
[comment @main/]

[file ('outils' + aTable.nom + '/' + aTable.nom + 'Donnees.java', false, 'UTF-8')]
import java.util.*;

public class [aTable.nom/]Donnees {
	public HashMap<String, List<Float>> donneesJava;
	public String id;
	public List<String> valeurs_id;

	public [aTable.nom/]Donnees(HashMap<String, List<Float>> donneesJava, String id, List<String> valeurs_id) {
		this.donneesJava = donneesJava;
		this.id = id;
		this.valeurs_id = valeurs_id;
	}

	public String getDataToString(String cle) {
		String r = "['['/]";
		for (Float f : donneesJava.get(cle)) {
			r = r + f + ",";
		}
		r = r.substring(0,r.length()-1);
		return r + "]";
	}

}
[/file]

[file ('outils' + aTable.nom + '/' + aTable.nom + 'Importer.java', false, 'UTF-8')]
import java.io.*;
import java.util.*;

public class [aTable.nom/]Importer {


     // Fonction pour convertir une List<String> en List<Float>
     public static List<Float> stringListToFloatList(List<String> stringList) {
        List<Float> floatList = new ArrayList<>();
        
        for (String str : stringList) {
            try {
                // Convertir chaque chaîne en un float et ajouter à la liste
                floatList.add(Float.parseFloat(str));
            } catch (NumberFormatException e) {
                System.err.println("Données invalides dans le CSV (ne doit contenir que des float sauf pour la colonne identifiants) " + str);
                System.exit(1);
            }
        }
        
        return floatList;
    }

    public static [aTable.nom/]Donnees importer(String['['/]] args) throws Exception {

		System.out.println("Début de l'importation des données");
		if (args.length != [aTable.getTableEtrangere()->size()/]+1) {
			throw new Exception("Usage : java [aTable.nom/]Verifier <path_to_csv> <table_etr_1.csv> .. <table_etr_n.csv>");
		}

        // Chemin du fichier CSV passé en argument
        String fichierCsv = args['['/]0];

        // HashMap pour stocker les données
        HashMap<String, List<String>> map = new HashMap<>();

        try (BufferedReader br = new BufferedReader(new FileReader(fichierCsv))) {
            String ligne;
            String['['/]] entetes = null;

            // Lire la première ligne (les noms des colonnes)
            if ((ligne = br.readLine()) != null) {
                entetes = ligne.split(","); 
                for (String entete : entetes) {
                    map.put(entete, new ArrayList<>());
                }
            }

            // Lire les lignes suivantes et les ajouter à la HashMap
            while ((ligne = br.readLine()) != null) {
                String['['/]] valeurs = ligne.split(",");

                for (int i = 0; i < entetes.length; i++) {
                    map.get(entetes['['/]i]).add(valeurs['['/]i]);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        } catch (ArrayIndexOutOfBoundsException e) {
			throw new Exception("CSV invalide : toutes les colonnes doivent avoir la même taille");
		}
	
		// Les colonnes du schémaTable
		List<String> colonnesTable = new LinkedList<>();
		Collections.addAll(colonnesTable, [for (c: Colonne | aTable.getColonnesPures())] "[c.nom/]",[/for]"" );
		colonnesTable.remove("");

		// ajout des colonnes étrangères
		[let i : Integer = 1/]
		[for (te : Table | aTable.getTableEtrangere())]
		String te_[te.nom/] = args['['/][i/]];[let i : Integer = i+1/]
		[/for]
		
		[for (ce : ColonneEtrangere | aTable.getColonneEtrangere())]
		List<String> elt_ce = new ArrayList<String>();

		try (BufferedReader br = new BufferedReader(new FileReader(te_[ce.tableEtrangere.nom/]))) {
            String ligne;
            String['['/]] entetes = null;

            // Lire la première ligne pour connaitre l'indice de la colonne dans la table etrangere

			int indice_etr = 0;
            if ((ligne = br.readLine()) != null) {
                entetes = ligne.split(",");
				int i = 0;
                for (String nom_c : entetes) {
                    if (nom_c.equals("[ce.idColonneTableEtrangere/]")) {
						indice_etr = i;
					}
					i++;
                }
            }

            // Lire les lignes suivantes et les ajouter à la HashMap
            while ((ligne = br.readLine()) != null) {
                String['['/]] valeurs = ligne.split(",");
				elt_ce.add(valeurs['['/]indice_etr]);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } catch (ArrayIndexOutOfBoundsException e) {
			throw new Exception("CSV invalide : toutes les colonnes doivent avoir la même taille");
		}

		map.put("[ce.nom/]", elt_ce);
		colonnesTable.add("[ce.nom/]");
		[/for]

		// Validité du CSV
		for (String str : colonnesTable) {
			if (!(map.keySet().contains(str))) {
				throw new Exception("CSV invalide : le csv ne correspond pas au schematable [aTable.nom/]");
			}
		}

		for (String str : map.keySet()) {
			if (!(colonnesTable.contains(str))) {
				throw new Exception("CSV invalide : le csv ne correspond pas au schematable [aTable.nom/]");
			}
		}
		String id = "[aTable.getColonneId()/]";
		List<String> valeurs_id = map.remove("[aTable.getColonneId()/]");
	
		// on vérifie qu'il n'y a pas 2 fois le meme nom
		Set<String> set_id = new HashSet<>(valeurs_id);
    	if (set_id.size() != valeurs_id.size()) {
			throw new Exception("CSV invalide : il ne peut y avoir deux instances d'un même identifiant dans la colonne identifiants");
		}

		HashMap<String, List<Float>> donneesJava = new HashMap<>();
		for (String cle : map.keySet()){
			donneesJava.put(cle,stringListToFloatList(map.get(cle)));
		}

		// on vérifie que toutes les colonnes ont la bonne taille
		for (List<Float> colonnevaleurs : donneesJava.values()) {
			if (colonnevaleurs.size() != valeurs_id.size()) {
				throw new Exception("CSV invalide : toutes les colonnes doivent avoir la même taille");
			}
		} 
	
		// System.out.println(donneesJava.toString() + id + valeurs_id);
		return new [aTable.nom/]Donnees(donneesJava, id, valeurs_id);
    }

}
[/file]

[file ('outils' + aTable.nom + '/' + aTable.nom + 'Verifier.java', false, 'UTF-8')]
import java.io.*;
import java.util.*;
import java.util.concurrent.TimeUnit;

//import projet.calcul.toPython.src.projet.calcul.toPython.main.ToPython;

public class [aTable.nom/]Verifier {

	public static List<String> lireArguments(String cheminFichier) throws Exception {
        List<String> liste = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(cheminFichier))) {
            String ligne;
            while ((ligne = reader.readLine()) != null) {
                String['['/]] elements = ligne.split(",");
                for (String element : elements) {
                    // Ajouter l'élément à la liste, en ignorant les chaînes vides si nécessaire
                    if (!element.isEmpty()) {
                        liste.add(element);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        return liste;
    }

	public static List<Float> lireData() {
        List<Float> floatList = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("data.txt"))) {
            String line = reader.readLine();
            
            if (line != null && !line.trim().isEmpty()) {
                // Supprimer les crochets et parse la chaîne par virgule + espace
                line = line.trim();
                if (line.startsWith("['['/]") && line.endsWith("]")) {
                    line = line.substring(1, line.length() - 1);
                }
                
                String['['/]] values = line.split(", ");
                
                for (String value : values) {
                    try {
                        floatList.add(Float.parseFloat(value.trim()));
                    } catch (NumberFormatException e) {
                        System.err.println("Erreur de format dans la ligne: " + value);
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Erreur lors de la lecture du fichier: " + e.getMessage());
        }

        return floatList;
    }

	public static boolean verifierContraintes([aTable.nom/]Donnees donnees) throws IOException, InterruptedException, Exception {
		boolean b = true;
		List<String> errors = new ArrayList<>();

		[for (a : Algorithme | aTable.algoContrainte)]
			String path = "[a.ressource/]";
			[if (a.langage = Langage::INTERNE)]
			String commandToPython = "/usr/lib/jvm/java-17-openjdk-amd64/bin/java -Dfile.encoding=UTF-8 -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8 -classpath /mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.annotation.versioning_1.1.2.202109301733.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.annotation.bundle_2.0.0.202202082230.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.service.component.annotations_1.5.1.202212101352.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.service.metatype.annotations_1.4.1.202109301733.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.core.runtime_3.29.0.v20230726-0617.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.osgi_3.18.500.v20230801-1826.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.osgi.compatibility.state_1.2.800.v20221116-1440.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.equinox.common_3.18.100.v20230730-1117.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.core.jobs_3.15.0.v20230808-1403.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.equinox.registry_3.11.300.v20230801-1826.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.equinox.preferences_3.10.300.v20230630-1303.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.service.prefs_1.1.2.202109301733.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.core.contenttype_3.9.100.v20230630-1232.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.equinox.app_1.6.300.v20230630-1303.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.ecore_2.35.0.v20230829-0934.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.common_2.29.0.v20230810-0713.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.ecore.xmi_2.35.0.v20230801-1141.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.ocl_3.18.0.v20221201-0557.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/lpg.runtime.java_2.0.17.v201004271640.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.ocl.common_1.18.0.v20221201-0557.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.ocl.ecore_3.18.0.v20221201-0557.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.acceleo.common_3.7.9.201911060712.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.acceleo.model_3.7.9.201911060712.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.acceleo.profiler_3.7.9.201911060712.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.acceleo.engine_3.7.9.201911060712.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.codegen.ecore_2.35.0.v20230801-1141.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.codegen_2.23.0.v20230211-1150.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/com.google.guava_32.1.2.jre.jar:/home/tkn7092/2A/IDM/projet-idm-24-25/main/projet.schemaTable/bin:/home/tkn7092/2A/IDM/projet-idm-24-25/main/projet.calcul.toPython/bin -XX:+ShowCodeDetailsInExceptionMessages projet.calcul.toPython.main.ToPython [a.ressource/] .";
			Process prArgs = Runtime.getRuntime().exec(commandToPython);
			prArgs.waitFor();
			path = "./calcul.py";
			[/if]
			System.out.println("Vérification des contraintes de " + "[a.nom/]");
			//TimeUnit.MILLISECONDS.sleep(500); // (solution d'urgence) pour attendre le référencement du fichier au niveau de la table des fichiers
			List<String> args = lireArguments("arguments.txt");
			[let i : Integer = 0/]
			String['['/]] command = {"python3", path,[for (e : String | a.entree)] args.get([i-1/]).toString(), donnees.getDataToString("[e/]")[let i : Integer = i + 1/][/for]}; // + " > data.txt"; 
			//System.out.println("Commande Python : " + String.join(" ", command));

			ProcessBuilder builder = new ProcessBuilder(command);
        	builder.redirectErrorStream(true);  // Redirige les erreurs vers la sortie standard
        	Process pr = builder.start();
			BufferedReader reader = new BufferedReader(new InputStreamReader(pr.getInputStream()));
			String line;
        	while ((line = reader.readLine()) != null) {
            	System.out.println(line); // lire la sortie du process
        	}
			pr.waitFor();
			// il faut lire la data
			List<Float> dataFloat = lireData();
			
			// vérifier qu'il y a que des 0 (si non: b <- faux et print erreur sur le nom de l'algo)
			int i = 1; 
			for (Float value : dataFloat) {
				if (value <= 0f) {
					b = false;
					errors.add("La contrainte [a.nom/] n'est pas validé à la ligne : " + i);
				}
				i++;
			}
			
			// remove la data + remove les arguments
			Runtime.getRuntime().exec("rm data.txt arguments.txt calcul.py");
		[/for]

		if (!b) {
			System.out.println("La table ne vérifie pas les contraintes :");
        	errors.forEach(System.err::println);
		} else {
			System.out.println("La table vérifie toute les contraintes");
		}

		return b;
	}

	public static void main(String args['['/]]) throws IOException, InterruptedException, Exception {
		// Exemple d'appel
		/*HashMap<String, List<Float>> donneesJava = new HashMap<>();
        donneesJava.put("loyer", Arrays.asList(400f, 290f, 590f));
        donneesJava.put("surface", Arrays.asList(25f, 10f, 400f));

		verifierContraintes(new [aTable.nom/]Donnees(donneesJava, "Identité", Arrays.asList("appart 1", "appart 2", "appart 3"))); */


		[aTable.nom/]Donnees donnees = (new [aTable.nom/]Importer()).importer(args);
		verifierContraintes(donnees);
	}
}

[/file]

[file ('outils' + aTable.nom + '/' + aTable.nom + 'CalculAuto.java', false, 'UTF-8')]
import java.io.*;
import java.util.*;

public class [aTable.nom/]CalculAuto {

	public static List<String> lireArguments(String cheminFichier) throws Exception {
        List<String> liste = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(cheminFichier))) {
            String ligne;
            while ((ligne = reader.readLine()) != null) {
                String['['/]] elements = ligne.split(",");
                for (String element : elements) {
                    // Ajouter l'élément à la liste, en ignorant les chaînes vides si nécessaire
                    if (!element.isEmpty()) {
                        liste.add(element);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        return liste;
    }

	public static List<Float> lireData() {
        List<Float> floatList = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("data.txt"))) {
            String line = reader.readLine();
            
            if (line != null && !line.trim().isEmpty()) {
                // Supprimer les crochets et parse la chaîne par virgule + espace
                line = line.trim();
                if (line.startsWith("['['/]") && line.endsWith("]")) {
                    line = line.substring(1, line.length() - 1);
                }
                
                String['['/]] values = line.split(", ");
                
                for (String value : values) {
                    try {
                        floatList.add(Float.parseFloat(value.trim()));
                    } catch (NumberFormatException e) {
                        System.err.println("Erreur de format dans la ligne: " + value);
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Erreur lors de la lecture du fichier: " + e.getMessage());
        }

        return floatList;
    }

	public static [aTable.nom/]Donnees calculerColonnesDerivees([aTable.nom/]Donnees donnees) throws IOException, InterruptedException, Exception {
		
		// Récupérer les colonnes des tables étrangères
		// (les ajouter aux donnees)
		// à faire dans Importer et appeler dans le main avant d'utiliser

		// Récupérer les colonnes dérivées et trouver l'ordre de maj
		HashMap<String,Boolean> c_der = new HashMap<String,Boolean>();
		[for (d : ColonneDerivee | aTable.getColonneDerivee())]
		c_der.put("[d.nom/]",false);
		[/for]
		
		// Générer les (avec toPython) calcul(i).py et arguments(i).txt pour ne pas générer 2 python identiques
		HashMap<String,String> assoc_ressource_newressource = new HashMap<String,String>();
		HashMap<String,String> assoc_der_newressource = new HashMap<String,String>();
		[for (d : ColonneDerivee | aTable.getColonneDerivee())]
		if (!assoc_ressource_newressource.keySet().contains("[d.algorithme.ressource/]")) {
			assoc_der_newressource.put("[d.nom/]","[d.nom/]");
			assoc_ressource_newressource.put("[d.algorithme.ressource/]","[d.nom/]");

			[if (d.algorithme.langage = Langage::INTERNE)]
			String commandToPython[d.nom/] = "/usr/lib/jvm/java-17-openjdk-amd64/bin/java -Dfile.encoding=UTF-8 -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8 -classpath /mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.annotation.versioning_1.1.2.202109301733.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.annotation.bundle_2.0.0.202202082230.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.service.component.annotations_1.5.1.202212101352.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.service.metatype.annotations_1.4.1.202109301733.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.core.runtime_3.29.0.v20230726-0617.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.osgi_3.18.500.v20230801-1826.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.osgi.compatibility.state_1.2.800.v20221116-1440.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.equinox.common_3.18.100.v20230730-1117.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.core.jobs_3.15.0.v20230808-1403.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.equinox.registry_3.11.300.v20230801-1826.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.equinox.preferences_3.10.300.v20230630-1303.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.osgi.service.prefs_1.1.2.202109301733.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.core.contenttype_3.9.100.v20230630-1232.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.equinox.app_1.6.300.v20230630-1303.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.ecore_2.35.0.v20230829-0934.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.common_2.29.0.v20230810-0713.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.ecore.xmi_2.35.0.v20230801-1141.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.ocl_3.18.0.v20221201-0557.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/lpg.runtime.java_2.0.17.v201004271640.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.ocl.common_1.18.0.v20221201-0557.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.ocl.ecore_3.18.0.v20221201-0557.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.acceleo.common_3.7.9.201911060712.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.acceleo.model_3.7.9.201911060712.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.acceleo.profiler_3.7.9.201911060712.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.acceleo.engine_3.7.9.201911060712.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.codegen.ecore_2.35.0.v20230801-1141.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/org.eclipse.emf.codegen_2.23.0.v20230211-1150.jar:/mnt/n7fs/ens/tp_dupont/modelling-2023-09/eclipse/plugins/com.google.guava_32.1.2.jre.jar:/home/tkn7092/2A/IDM/projet-idm-24-25/main/projet.schemaTable/bin:/home/tkn7092/2A/IDM/projet-idm-24-25/main/projet.calcul.toPython/bin -XX:+ShowCodeDetailsInExceptionMessages projet.calcul.toPython.main.ToPython [d.algorithme.ressource/] .";
			Process prArgs[d.nom/] = Runtime.getRuntime().exec(commandToPython[d.nom/]);
			prArgs[d.nom/].waitFor();
			Process prRenameCalc[d.nom/] = Runtime.getRuntime().exec("mv ./calcul.py ./calcul[d.nom/].py");
			prRenameCalc[d.nom/].waitFor();
			Process prRenameArgs[d.nom/] = Runtime.getRuntime().exec("mv ./arguments.txt ./arguments[d.nom/].txt");
			prRenameArgs[d.nom/].waitFor();
			[/if]
		} else {
			assoc_der_newressource.put("[d.nom/]",assoc_ressource_newressource.get("[d.algorithme.ressource/]"));
			assoc_ressource_newressource.put("[d.algorithme.ressource/]",assoc_ressource_newressource.get("[d.algorithme.ressource/]"));
		}
		[/for]

		String line;
		int max_iter = 100;
		int iter = 0;

		while (iter < max_iter && c_der.values().stream().anyMatch(b -> !b)) {
		[for (d : ColonneDerivee | aTable.getColonneDerivee())]
		if (!c_der.get("[d.nom/]")) { // est-ce que la colonne est déjà calculée
			List<String> c_der_entree = new ArrayList<String>();
			[for (s : String | d.algorithme.entree)]
			c_der_entree.add("[s/]");
			[/for]
			// tester si il y a une colonne de c_der_entree dans les c_der à false
			for (String nom_entree : c_der_entree) {
				if ((!c_der.keySet().contains(nom_entree)) || (c_der.keySet().contains(nom_entree) && c_der.get(nom_entree))) {
					// calculer la colonne c_der (executer le .py)
					
					c_der.replace("[d.nom/]",false,true);
					String pathCalcul[d.nom/] = "./calcul" + assoc_der_newressource.get("[d.nom/]") + ".py";
					String pathArgsPy[d.nom/] = "[d.algorithme.ressource/]";
					[if(d.algorithme.langage = Langage::INTERNE)]
					List<String> args = lireArguments("arguments" + assoc_der_newressource.get("[d.nom/]") + ".txt");
					String['['/]] command[d.nom/] = {"python3", pathCalcul[d.nom/],[for (e : String | d.algorithme.entree)] args.get([i-1/]).toString(), donnees.getDataToString("[e/]")[let i : Integer = i + 1/][/for]}; // + " > data.txt"; 
					[/if]
					[if(d.algorithme.langage = Langage::PYTHON)]
					List<String> args = lireArguments(pathArgsPy[d.nom/].substring(0,pathArgsPy[d.nom/].length() - 3) + ".txt");
					String['['/]] command[d.nom/] = {"python3", "[d.algorithme.ressource/]",[for (e : String | d.algorithme.entree)] args.get([i-1/]).toString(), donnees.getDataToString("[e/]")[let i : Integer = i + 1/][/for]}; // + " > data.txt"; 
					[/if]
					[let i : Integer = 0/]

					ProcessBuilder builder[d.nom/] = new ProcessBuilder(command[d.nom/]);
			        builder[d.nom/].redirectErrorStream(true);  // Redirige les erreurs vers la sortie standard
			        Process pr[d.nom/] = builder[d.nom/].start();
					BufferedReader reader[d.nom/] = new BufferedReader(new InputStreamReader(pr[d.nom/].getInputStream()));
					
			        while ((line = reader[d.nom/].readLine()) != null) {
			           	System.out.println(line); // lire la sortie du process
			        }
					pr[d.nom/].waitFor();

					List<Float> valeurs_[d.nom/] = lireData();
					Process prClean[d.nom/] = Runtime.getRuntime().exec("rm data.txt");
					prClean[d.nom/].waitFor();

					// remove les calculs

					donnees.donneesJava.put("[d.nom/]",valeurs_[d.nom/]);

				} // sinon : il y en a un autre à calculer avant... (pas de code à écrire)
			}
			
		}
		[/for]
		iter++;
		}

		if (iter == max_iter) {
			System.out.println("Toutes les colonnes n'ont pas pu être calculé \nIl doit y avoir présence d'un cycle entre les colonnes dérivées");
		} else {
			System.out.println("Les colonnes dérivées ont été calculées avec succès");
		}

		return donnees;
	}

	public static void main(String args['['/]]) throws IOException, InterruptedException, Exception {
		
		[aTable.nom/]Donnees donnees = (new [aTable.nom/]Importer()).importer(args);
		// on pourrait vérifier les donnees ici
		[aTable.nom/]Donnees donneesCalculees = calculerColonnesDerivees(donnees);
		// pour afficher les nouvelles valeurs
		(new [aTable.nom/]Visualisation()).toHTML(donnees.donneesJava, donnees.id, donnees.valeurs_id);
		(new [aTable.nom/]Exporter()).exporter(donnees.donneesJava, donnees.id, donnees.valeurs_id);
	}
}

[/file]

[file ('outils' + aTable.nom + '/' + aTable.nom + 'Exporter.java', false, 'UTF-8')]
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public class [aTable.nom/]Exporter {

    /**
     * Crée un fichier .csv comportant les données
     * @param donneesJava   issues de l'import d'un csv (HashMap)
     * @param id            le nom de la colonne identitée
     * @param valeurs_id    les valeurs de la colonne identitée
     */
    public static void exporter(HashMap<String, List<Float>> donneesJava, String id, List<String> valeurs_id) {
        String fileName = "[aTable.nom/]Export.csv";
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            
            writer.write(id); // Nom de la colonne identitée
            for (String key : donneesJava.keySet()) {
                writer.write("," + key); // Nom des autres colonnes
            }
            writer.newLine(); // Nouvelle ligne après l'en-tête
            
            // Ecrire les valeurs des lignes
            for (String valueId : valeurs_id) {
                writer.write(valueId);
                
                for (String key : donneesJava.keySet()) {
                    List<Float> valeurs = donneesJava.get(key);
                    // Trouver l'indice de valueId dans valeurs_id et récupérer la valeur correspondante
                    int index = valeurs_id.indexOf(valueId);
                    if (index != -1 && index < valeurs.size()) {
                        writer.write("," + valeurs.get(index));
                    } else {
                        writer.write(",");
                    }
                }
                writer.newLine();
            }

            System.out.println("Fichier CSV créé avec succès : " + fileName);
            
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Erreur lors de l'export du fichier CSV.");
        }
    }

	// Exemple
    public static void main(String['['/]] args) {
        HashMap<String, List<Float>> donneesJava = new HashMap<>();
        donneesJava.put("Colonne1", List.of(1.1f, 2.2f, 3.3f));
        donneesJava.put("Colonne2", List.of(4.4f, 5.5f, 6.6f));
        List<String> valeurs_id = List.of("ID1", "ID2", "ID3");

        exporter(donneesJava, "Identifiant", valeurs_id);
    }
}
[/file]

[file ('outils' + aTable.nom + '/' + aTable.nom + 'Visualisation.java', false, 'UTF-8')]
import java.io.*;
import java.util.HashMap;
import java.util.List;
import java.util.Arrays;

public class [aTable.nom/]Visualisation {
	
	public static void toHTML(HashMap<String, List<Float>> donneesJava, String id, List<String> valeurs_id) {
        try {
            FileWriter writer = new FileWriter("[aTable.nom/]Tableau.html");

            // Début du fichier
            writer.write("<html><head><title>[aTable.nom/]</title></head><body>");
            writer.write("<h1>[aTable.nom/]</h1>");
            writer.write("<table border='1'>");

            // en-tête du tableau
            writer.write("<tr><th>" + id + "</th>");
            for (String key : donneesJava.keySet()) {
                writer.write("<th>" + key + "</th>");
            }
            writer.write("</tr>");

            // lignes du tableau
            for (int i = 0; i < valeurs_id.size(); i++) {
                writer.write("<tr>");
                // Afficher la valeur de la colonne d'identité
                writer.write("<td>" + valeurs_id.get(i) + "</td>");
                // Afficher les autres données pour chaque ligne
                for (String key : donneesJava.keySet()) {
                    List<Float> dataList = donneesJava.get(key);
                    if (dataList.size() > i) {
                        writer.write("<td>" + dataList.get(i) + "</td>");
                    } else {
                        writer.write("<td></td>");
                    }
                }
                writer.write("</tr>");
            }

            // Fin du fichier HTML
            writer.write("</table>");
            writer.write("</body></html>");
            writer.close();

            System.out.println("Le fichier HTML a été généré avec succès : [aTable.nom/]Tableau.html");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
	
	
	/**
	 * Main pour tester un exemple
	 */
	public static void main(String['['/]] args) throws Exception {
        
		[aTable.nom/]Donnees donnees = (new [aTable.nom/]Importer()).importer(args);
		//(new [aTable.nom/]Verifier()).verifierContraintes(donnees);
        toHTML(donnees.donneesJava, donnees.id, donnees.valeurs_id);
    }
}
[/file]

[file ('outils' + aTable.nom + '/' + aTable.nom + 'InterfaceHM.java', false, 'UTF-8')]
import java.util.*;

public class [aTable.nom/]InterfaceHM {

    public static void main(String['['/]] argsMain) throws Exception {

		System.out.println("Pensez à bien importer les csv avant d'appeler toutes autres commandes");
        Scanner scanner = new Scanner(System.in);

		[aTable.nom/]Donnees donnees = (new [aTable.nom/]Donnees(new HashMap<String,List<Float>>(), "", new ArrayList<String>()));
		String['['/]] args = new String['['/][aTable.getColonneEtrangere()->size()/]+1];

        while (true) {
            // Afficher le menu
            System.out.println("=== Menu Principal ===");
            System.out.println("1. Importer csv");
            System.out.println("2. Valider le csv");
			System.out.println("3. Calculer les colonnes dérivées");
			System.out.println("4. Exporter les données en csv");
			System.out.println("5. Visualiser les données avec un html");
            System.out.println("6. Quitter");
            System.out.print("Veuillez choisir une option (1/2/3/4/5/6) : ");

            // Lire l'option choisie par l'utilisateur
            int choix = scanner.nextInt();

            switch (choix) {
                case 1:
					System.out.println("Indiquer le chemin vers le csv : ");
					args['['/]0] = scanner.next();
					[let i : Integer = 1/]
                    [for (ce : ColonneEtrangere | aTable.getColonneEtrangere())]
					System.out.println("Indiquer le chemin vers le csv de la colonne étrangère [ce.nom/] : ");
					args['['/][i/]] = (scanner.next());[let i : Integer = i+1/]
					[/for]
					donnees = (new [aTable.nom/]Importer()).importer(args);
                    break;
                case 2:
                    (new [aTable.nom/]Verifier()).verifierContraintes(donnees);
                    break;
				case 3:
                    donnees = (new [aTable.nom/]CalculAuto()).calculerColonnesDerivees(donnees);
                    break;
                case 4:
                    (new [aTable.nom/]Exporter()).exporter(donnees.donneesJava, donnees.id, donnees.valeurs_id);
                    break;
				case 5:
                    (new [aTable.nom/]Visualisation()).toHTML(donnees.donneesJava, donnees.id, donnees.valeurs_id);
					Runtime.getRuntime().exec("firefox [aTable.nom/]Tableau.html");
                    break;
                case 6:
                    System.out.println("Au revoir!\n");
                    scanner.close();
                    return;
                default:
                    System.out.println("Option invalide. Essayez à nouveau.");
            }
        }
    }


}


[/file]
[/template]

[query public getColonnesPures(t: Table) : OrderedSet(Colonne) = 
	t.colonneData->select( e | not(e.oclIsTypeOf(ColonneEtrangere) or e.oclIsTypeOf(ColonneDerivee)))
		->asOrderedSet()
/]

[query public getColonneId(t: Table) : String = 
	t.colonneData->select( e | e.oclIsTypeOf(ColonneIdentifiants)).nom
/]

[query public getTableEtrangere(t: Table) : OrderedSet(Table) =
	t.colonneData->select(c | c.oclIsTypeOf(ColonneEtrangere))->collect(c | c.oclAsType(ColonneEtrangere).tableEtrangere)->asOrderedSet()
/]

[query public getColonneEtrangere(t: Table) : OrderedSet(ColonneEtrangere) = 
	t.colonneData->select( e | e.oclIsTypeOf(ColonneEtrangere))
/]

[query public getColonneDerivee(t: Table) : OrderedSet(ColonneDerivee) = 
	t.colonneData->select( e | e.oclIsTypeOf(ColonneDerivee))
/]
